#change an excel sheet to a csv file
import xlrd
import csv

def csv_from_excel(workbook):
    wb = xlrd.open_workbook(workbook)
    sh = wb.sheet_by_name('Sheet1')
    with open('MS.csv', 'w') as MS:
        wr = csv.writer(MS, quoting=csv.QUOTE_ALL)

        for rownum in range(sh.nrows):
            wr.writerow(sh.row_values(rownum))

    MS.close()

csv_from_excel("MS.xlsx")

#read csv file as a dictionary
#write the csv file as dictionary with gene names as keys and 'unique hits' as values, removing the header
import csv
with open ("MS.csv", mode= 'r') as infile:
    reader = csv.reader(infile)
    next(reader,None)
    with open("MS_new.csv", mode= 'w') as outfile: 
        writer = csv.writer(outfile)
        hitnumbers= {rows[3]:rows[0] for rows in reader}

#convert values in dictionary from strings to floats
hitnumbers_ints= dict((k,float(v)) for k,v in hitnumbers.items())

#convert the dictionary into a list containing all unique hit values >1
hits_list=[]
for key, value in hitnumbers_ints.items():
    if value > 1:
        hits_list.append(key)
        
#read the csv file as a dictionary
#write the csv file as dictionary with gene names as keys and molecular weights as values, removing the header
with open ("MS.csv", mode= 'r') as infile:
    reader = csv.reader(infile)
    next(reader,None)
    with open("MS_new.csv", mode= 'w') as outfile: 
        writer = csv.writer(outfile)
        MW= {rows[3]:rows[4] for rows in reader}
        
#convert values from strings to floats
MW_float= dict((k,float(v)) for k,v in MW.items())

#convert the dictionary into a list containing all gene names with molecular weights in the range of 50-70kDa
MW_list=[]
for key, value in MW_float.items():
    if 50.0 < value < 70.0:
        MW_list.append(key)

#concatenate gene names with >1 unique hits and molecular weights in the range of 50-70 into a master list
sig_hits= (list(set(hits_list) & (set(MW_list))))

#import python packages for parsing HTML
import sys
import requests
from bs4 import BeautifulSoup

#declare a function to serach filtered gene names form the master list on the uniprot website using a specific keyword  

def search_uniprot(genes, keyword):
        keyword = keyword.lower()

        #create an empty list that will be used to write a csv containing all gene names identified by the keyword
        hits = []

        for gene in genes:
            
            gene= gene.lower()

            #this is the url from uniprot that ensures the gene name search result is reviewed, is in the organism homo sapiens, and is sorted by top result
            query_url = "https://www.uniprot.org/uniprot/?query=reviewed:yes+AND+organism:9606+" + gene + "&sort=score"


            query_page = requests.get(query_url)
            
            #use beautiful soup to fetch the html from the requested webpage
            query_soup = BeautifulSoup(query_page.text, "html.parser")

            #ensures procession if and only if uniprot returns search results 
            if "Sorry, no results found for your search term." not in (str(query_soup.findAll("h2"))):

                #finds the first uniprot identifier in search results for the gene name
                entry_id = str(query_soup.tbody.tr["id"])
                entry_url = "https://www.uniprot.org/uniprot/" + entry_id + ".txt"

                #sends an http request for the text version of entry for uniprot identifier
                entry_page = requests.get(entry_url).text

                entry_page = entry_page.lower()

                start = entry_page.find("""-!-""")
                
                stop = entry_page.find("copyrighted")
                
                #search uniprot text page using consistent demarcations specifying gene description
                if keyword in entry_page[start:stop]:
                    hits.append(gene)
                    #shows genes that were found with keyword
                    print(gene)

        #writes all genes identified by the keyword to new csv file
        with open(keyword + ".csv", 'w', newline='') as csvfile:
            genewriter = csv.writer(csvfile, delimiter=',', quoting=csv.QUOTE_ALL)
            genewriter.writerow(hits)
            
#call the function to search filtered list of gene names by a specific keyword
search_uniprot(sig_hits, "MAPK")
